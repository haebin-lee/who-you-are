# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: ['main']

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-west2
  GKE_CLUSTER: who-you-are
  GKE_ZONE: us-west2
  DEPLOYMENT_NAME: who-you-are-test
  REPOSITORY: who-you-are-repo
  IMAGE: static-site

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Echo environment variables and Github context
        run: |-
          echo "GAR_LOCATION: ${{ env.GAR_LOCATION }}"
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "REPOSITORY: ${{ env.REPOSITORY }}"
          echo "IMAGE: ${{ env.IMAGE }}"
          echo "GITHUB_SHA: ${{ github.sha }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GKE_CLUSTER: ${{ env.GKE_CLUSTER }}"
          echo "GKE_ZONE: ${{ env.GKE_ZONE }}"
          echo "DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}"

      - name: Replace Placeholders in deployement.yml
        run: |
          sed -i "s/PROJECT_ID/${{ env.PROJECT_ID }}/g" deployment.yml
          sed -i "s/IMAGE/${{ env.IMAGE }}/g" deployment.yml
          sed -i "s/TAG/${{ github.sha }}/g" deployment.yml

      # Configure Workload Identity Federation and generate an access token.
      # - id: 'auth'
      #   name: 'Authenticate to Google Cloud'
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     token_format: 'access_token'
      #     workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
      #     service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

      # Configure Workload Identity Federation and generate an access token.
      # Alternative option - authentication via credentials json
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}' # git secrets actions에 등록되어 있어야 함

      # Configure Docker to use the access token as a password
      # - name: Docker configuration
      # run: |
      #   echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      # Configure Docker
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Install dependencies
      - name: Install dependencies
        run: |
          npm ci

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY}}/${{ env.IMAGE }}:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="${{ github.sha }}" \
            --build-arg GITHUB_REF="${{ github.ref }}" \
            .
      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # # Set up kustomize
      # - name: Set up Kustomize
      #   run: |-
      #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
      #     chmod u+x ./kustomize

      # # Deploy the Docker image to the GKE cluster
      # - name: Deploy
      #   run: |-
      #     # replacing the image name in the k8s template
      #     ./kustomize edit set image LOCATION-docker.pkg.dev/${{ env.GAR_LOCATION }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
      #     ./kustomize build . | kubectl apply -f -
      #     kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
      #     kubectl get services -o wide
